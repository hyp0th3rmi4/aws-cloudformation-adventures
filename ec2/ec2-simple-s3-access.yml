AWSTemplateFormatVersion: 2010-09-09
Description: >
  This templates demonstrates how to build a simple EC2 instance
  and places it within a given subnet. The template also provisions
  a role to access the S3 buckets. This template extends the template
  defined in ec2-simple.yml, by adding the definition of a policy and
  a role for the access to the bucket. The role is conditionally created
  if no role has been passed.  
  This templates requires capabilities because it does assigns a role to
  the EC2 instance that is being created in order to access a private S3
  bucket.

# Parameters help customise the behaviour of the cloud formation 
# template. In this case we use the parameters to enable the
# calling to context to specialise instance type, subnet-id,
# and other matters.
#
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
Parameters:
  VpcId:
    Type: String
    Description: Unique identifier of the VPC associated to the Subnet and to the supplied security group (or the default one that will be created).
  SubnetId: 
    Type: String
    Description: Unique identifier of the subnet where the EC2 instance will be placed.
  ImageId:
    Type: String
    Description: Unique identifier of the image to create the instance with.       
  SecurityGroupId:
    Type: String
    Default: ''
    Description: Unique identifier of the security group to apply to the instance, if not specified default SSH access will be applied.
  InstanceName: 
    Type: String
    Description: Name of the instance. This will be added as a Tag whose label is Name.
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Enter the type of instance you want to launch. 
  InstanceShutdownBehaviour:
    Type: String
    Default: stop
    AllowedValues:
      - stop
      - terminate
    Description: Shutdown behaviour when initiated by the instance ('stop' or 'terminate'), default is 'stop'.
  InstanceKeyPairName:
    Type: String
    Description: Name of the SSH key pair that is used to access the instance.
  InstanceTenancy:
    Type: String
    Default: default
    AllowedValues:
      - default
      - dedicated
      - host
    Description: Defines the type of hosting environment for the instance (i.e. 'host', 'default' ,'dedidated'), default value is 'default'.
  BucketName:
    Type: String
    Description: Name of the S3 bucket containing the initialisation script.
  BucketPath:
    Type: String
    Description: Path of the object in the S3 bucket containing the initialisation script.
  # This parameter is used to specify a role name to attach the EC2 instance. If the
  # parameter is left empty, then the template will create one and grant read access
  # to the S3 bucket.
  InstanceRoleName:
    Type: String
    Default: ''
    Description: Defines the name of the role to attach to the instance.

# Conditions define constraints on the creation of resources, evaluation of parameters,
# or the production of output. In the current section we use it determine whether the
# name of the instance is been given otherwise a default name based on the stack is
# assigned.
#
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html
Conditions:
  HasName: !Not [!Equals [!Ref InstanceName, '']]
  DoesNotHaveSecurityGroup: !Equals [!Ref SecurityGroupId, '']
  DoesNotHaveRoleName: !Equals [!Ref InstanceRoleName, '']


# Resources define the entities that the template is composed of that represent
# infrastructure and services that will be deployed with the stack.
# 
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Security groups are needed becasue by default EC2 instances have all port blocked
  # and no traffic will be routed to the instance. This security group provide default
  # SSH access via port 22.
  #
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  AllowAccessViaSsh:
    Type: AWS::EC2::SecurityGroup
    Condition: DoesNotHaveSecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: AllowAccessViaSSH
      GroupDescription: Enables SSH access on port 22.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-AccessToSSH"]]
  # Same as above but we do grant access to HTTP port so that we can expose the web server.
  AllowAccessViaHttp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-AccessToHTTP"]]
  # This resource defines a simple role that enables READ access to S3. IAM Roles are attached to instances
  # to provide access to the AWS services. In this case we need to provide access to S3.
  #
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  ReadAccessToS3Role:
    Type: AWS::IAM::Role
    Condition: DoesNotHaveRoleName
    Properties:
      Description: Provides access to S3 in READ mode.
      # We add the region because using the template in different regions with the 
      # same name of the role may cause irrecoverable errors. Adding the region in
      # the name prevents this problem. 
      RoleName: !Join ['', ["ReadAccessToS3-", !Ref "AWS::Region"]]
      # This is a policy that determines who can assume this role and perform
      # the actions that this role is granted to. In this case the principal
      # is ec2.amazonaws.com, which identifies EC2 instances. This is NOT the
      # policy that will be used to access S3.
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-", !Ref "AWS::Region", "-AccessToS3Role"]]

  # The policy determines the access control rules to entities. In this case we will 
  # be defining a policy that provides read access to S3 buckets.
  #
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html
  ReadAccessToS3Policy:
    Type: AWS::IAM::Policy
    Condition: DoesNotHaveRoleName
    Properties:
      PolicyName: ReadAccessToS3Policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              # List bucket permissions
              - s3:ListAllMyBuckets
              - s3:ListBucket
              - s3:ListBucketByTags
              - s3:ListBucketMultipartUploads
              - s3:ListBucketVersions
              - s3:GetBucketAcl
              - s3:GetBucketCORS
              - s3:GetBucketLocation
              - s3:GetBucketPolicy
              - s3:GetBucketTagging
              - s3:GetBucketVersioning
              - s3:GetBucketWebsite
              # Get object permissions
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectTagging
              - s3:GetObjectVersion
            # All buckets associated to the account
            Resource:
              - '*'
      Roles:
        - !Ref ReadAccessToS3Role

  # The instance profile defines the role that is associated to the VM instance. The profile
  # requires the specification of one and one only role (by name).
  #
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      InstanceProfileName: !Join ["", [!Ref "AWS::StackName", "-InstanceProfile"]]
      Roles: 
        - Fn::If:
          - DoesNotHaveRoleName
          - !Ref ReadAccessToS3Role
          - !Ref InstanceRoleName

  # The instance does defines the specification of the virtual machine to launch. Most of the hardware
  # characteristics are defined by the instance type, while the guest operating system and the stack
  # that is being associated to the VM by the image identifier. It is also important to associate a
  # security group to control access to the instance.
  #
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref ImageId
      InstanceInitiatedShutdownBehavior: !Ref InstanceShutdownBehaviour
      InstanceType: !Ref InstanceType
      # By adding this we grant the role attached to the profile to the instance.
      # This is the linking bit that enables the instance to access the S3 service.
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref InstanceKeyPairName
      SubnetId: !Ref SubnetId
      Tenancy: !Ref InstanceTenancy
      SecurityGroupIds:
        - Fn::If:
          - DoesNotHaveSecurityGroup
          # For security groups created with the default VPC the !Ref function
          # returns the security group id, but if not in the default VPC it
          # will return the name, therefore we need to specifically access the
          # group identifier.
          - !GetAtt AllowAccessViaSsh.GroupId
          - !Ref SecurityGroupId
        - Fn::If:
          # Because we have added the default security group before we cannot
          # add it again, therefore we need an IF construct with no else. This
          # is possible if we use !Ref AWS::NoValue.
          - DoesNotHaveSecurityGroup
          - !GetAtt AllowAccessViaHttp.GroupId
          - !Ref "AWS::NoValue"
      # We use the UserData property to download and execute a boot script
      # from S3. The role granted to the instance via the instance profile
      # should provide the aws cli with all the required permissions for
      # performing the operation. We use the Substitute function that enables
      # us to tap into the parameters of the template and customise the user
      # data with template specific information, in this case BucketName and
      # BucketPath.
      UserData: 
        # NOTE: it is important to ensure that we don't use the combination
        # !Base64 !Sub because it will not work. We need one of the two functions
        # to be expressed with its canonical name.
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir ~/startup
          aws s3 cp s3://${BucketName}/${BucketPath} ~/startup/bootstrap.sh
          chmod +x ~/startup/bootstrap.sh
          sudo ~/startup/bootstrap.sh ${BucketName}

      Tags: 
      # Conditions can only be directly applied to resources, parameters, and 
      # outputs, but they can be used as arguments of if functions and this
      # enables us to selectively set the name of the instance either to a 
      # automatically generated name based on the stack or a user provided name
      # via the parameter. We could have also simply added the automatically
      # generated name as a default value to the parameter.
        - Fn::If: 
          - HasName
          - Key: Name
            Value: !Ref InstanceName
          - Key: Name
            Value: !Join ['', [!Ref "AWS::StackName", "-Instance"]]
    # Metadata section enables to add additional details that can be used to
    # further classify and enrich the information associated to the resource.
    # Differently from tags, which are used to classify and organise the entities
    # for management purpose, metadata can be retrieved dynamically to customise
    # the behaviour of the EC2 instance. In this case we use it pass the details
    # of the bucket containing the boot script.
    #
    # https://docs.amazonaws.cn/en_us/AWSCloudFormation/latest/UserGuide/aws-attribute-metadata.html
    Metadata:
      BucketName: !Ref BucketName
      BucketPath: !Ref BucketPath

# Outputs define values exported by the template that can be used and captured
# by other templates.
#
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
Outputs:
  InstanceId: 
    Description: Unique identifier of the instance created.
    Value: !Ref Instance
  InstanceAvailabilityZone: 
    Description: Availability Zone where the instance is located.
    Value: !GetAtt Instance.AvailabilityZone
  InstancePublicIpv4: 
    Description: Public IP (v4) of the instance (if any).
    Value: !GetAtt Instance.PublicIp
  InstancePublicDns: 
    Description: Public DNS name of the instance (if any).
    Value: !GetAtt Instance.PublicDnsName
  InstancePrivateIpv4: 
    Description: Private IP (v4) of the instance.
    Value: !GetAtt Instance.PrivateIp
  InstancePrivateDns: 
    Description: Private DNS name of the instance.
    Value: !GetAtt Instance.PrivateDnsName
